With the Istio mesh in place and configured to inject sidecar Pods, we can create an application manifest files.

Unlike Ingress controller Istio uses a different set of objects to expose application, Istio mesh uses a Gateway, which functions as a load balancer & handles incoming and outgoing HTTP/TCP connections. 

The Gateway then allows for monitoring and routing rules to be applied to traffic entering the mesh. The configuration that determines traffic routing is defined as a Virtual Service. Each Virtual Service includes routing rules that match criteria with a specific protocol and destination.

Node-grafana.yaml:
==================
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: grafana-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
        number: 15031
        name: http-grafana
        protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: grafana-vs
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - grafana-gateway
  http:
  - match:
    - port: 15031
    route:
    - destination:
        host: grafana
        port:
          number: 3000
          
kubectl get gateway -n istio-system
kubectl describe gateway -n istio-system 
kubectl get vs -n istio-system       
kubectl describe vs -n istio-system        
         
node-app.yaml:
=============
apiVersion: v1
kind: Service
metadata:
  name: nodejs
  labels:
    app: nodejs
spec:
  selector:
    app: nodejs
  ports:
    - name: http
      port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs
  labels:
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
        version: v1
    spec:
        containers:
        - name: nodejs
          image: vikas24775/istio-demo:latest
          ports:
          - containerPort: 8080
---
Each pod now has a envoy proxy along with it 
---         
===============
node-istio.yaml
===============
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: nodejs-gateway
spec:
  #A selector that will match this resource with the default Istio
  #IngressGateway controller that was enabled with the
  #configuration profile we selected when installing Istio.
  selector:
    istio: ingressgateway
  #A servers specification that specifies the port to expose for ingress
  #and the hosts exposed by the Gateway.
  #In this case, we are specifying all hosts with an asterisk (*)
  #since we are not working with a specific secured domain.
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nodejs
spec:
  #A hosts field that specifies the destination host.
  #In this case, we’re again using a wildcard value (*) to enable
  #quick access to the application in the browser.
  #since we’re not working with a domain.
  hosts:
  - "*"
  #A gateways field that specifies the Gateway through which
  #external requests will be allowed.
  gateways:
  - nodejs-gateway
  http:
  - route:
    #A destination field that indicates where the request
    #will be routed. In this case, it will be routed to the nodejs
    #service
    - destination:
        host: nodejs
    retries:
      attempts: 5
      perTryTimeout: 2s

kubectl get gateway
kubectl get vs

kubectl get svc -n istio-system --> use external ip to get your application running
==================
Canary deployment:
==================

node-app.yaml:
=============
apiVersion: v1
kind: Service
metadata:
  name: nodejs
  labels:
    app: nodejs
spec:
  selector:
    app: nodejs
  ports:
    - name: http
      port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-v1
  labels:
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
        version: v1
    spec:
        containers:
        - name: nodejs
          image: vikas24775/istio-demo:latest
          ports:
          - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-v2
  labels:
    version: v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodejs
  template:
    metadata:
      labels:
        app: nodejs
        version: v2
    spec:
        containers:
        - name: nodejs
          image: vikas24775/istio-canary-demo
          ports:
          - containerPort: 8080
          
===============
node-istio.yaml
===============
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: nodejs-gateway
spec:
  #A selector that will match this resource with the default Istio
  #IngressGateway controller that was enabled with the
  #configuration profile we selected when installing Istio.
  selector:
    istio: ingressgateway
  #A servers specification that specifies the port to expose for ingress
  #and the hosts exposed by the Gateway.
  #In this case, we are specifying all hosts with an asterisk (*)
  #since we are not working with a specific secured domain.
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nodejs
spec:
  #A hosts field that specifies the destination host.
  #In this case, we’re again using a wildcard value (*) to enable
  #quick access to the application in the browser.
  #since we’re not working with a domain.
  hosts:
  - "*"
  #A gateways field that specifies the Gateway through which
  #external requests will be allowed.
  gateways:
  - nodejs-gateway
  http:
  - route:
    #A destination field that indicates where the request
    #will be routed. In this case, it will be routed to the nodejs
    #service
    - destination:
        host: nodejs
        subset: v1
      weight: 80        
    - destination:
        host: nodejs
        subset: v2
      weight: 20 
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: nodejs
spec:
  host: nodejs
  subsets:
  - name: v1
    labels:
        version: v1
  - name: v2
    labels:
        version: v2
 
kubectl get gateway
kubectl get vs

kubectl get svc -n istio-system --> use external ip to get your application running
